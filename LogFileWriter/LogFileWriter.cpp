/****************************** Module Header ******************************\
Module Name:  LogFileWriter.cpp
Project:      LogFileWriter

This file implements classes for writing selected files meta-data in log file.
It writes in log creating date, size of files received in the constructor
sorted in alphabetical order.

\***************************************************************************/

#include <algorithm> // std::sort
#include <fstream> // std::wofstream
#include <codecvt> // locale
#include <locale> // locale

#include "boost/threadpool.hpp"
#include <boost/thread.hpp>
#include <boost/filesystem.hpp>
#include "FilePropertiesException.h"
#include "LogFileWriter.h"


LogFileWriter::TaskWorkerData::TaskWorkerData(std::vector<std::wstring> & _filesName) : filesName(_filesName), 
			semArray(_filesName.size(), std::make_shared<LogFileWriterSynchronizationPrimitives::Semaphore>()), results(_filesName.size())
{
}

LogFileWriter::LogFileWriter(std::vector<std::wstring> & files_name) : m_fileNames(files_name)
{
}

void LogFileWriter::SortFilesNameArray()
{
	std::sort(m_fileNames.rbegin(), m_fileNames.rend()); // ascending order
}

std::wstring LogFileWriter::getFileName(const std::wstring &fileName)
{
	boost::filesystem::path file_path(m_fileNames[0]);
	return file_path.filename().wstring();
}

std::wstring LogFileWriter::getLogPath(const std::wstring &fileName)
{
	boost::filesystem::path file_path(m_fileNames[0]);
	boost::filesystem::path directory_path = file_path.parent_path();
	boost::filesystem::path log_path(directory_path/fileName);
	return log_path.wstring();
}

void LogFileWriter::WriteDataInLog(const std::wstring & logFileName)
{
	std::wstring log_path;
	log_path = getFileName(logFileName.empty() ? std::wstring(L"ShellExtLog.log") : logFileName);
	std::wofstream mylog;
	mylog.open (log_path);	// create log file
	if (mylog.fail())
    {
		return;
    }
	const std::locale utf8_locale = std::locale(std::locale(), new std::codecvt_utf8<wchar_t>());
	mylog.imbue(utf8_locale);
	unsigned int coresCount = boost::thread::hardware_concurrency();
	if (coresCount > 2)
		--coresCount;
	using boost::threadpool::pool;
	pool tp(coresCount); //  handle to the thred pool
	TaskWorkerData workerData(m_fileNames);
	for(unsigned int i = 0; i < m_fileNames.size(); i++)
	{
		workerData.semArray[i]->lock(); // lock semaphore
		tp.schedule(boost::bind(FileInfoTaskWorker,workerData, i));
	}
	using std::endl;
	mylog << L"Log file generated by shell extension." << endl;
	for(unsigned int i = 0; i < m_fileNames.size(); i++)
	{
		mylog << getFileName(m_fileNames[i]) << L" | "; // write file name in log
		workerData.semArray[i]->wait(); // wait if data for this file is not ready
		WriteFileInfo(mylog, workerData.results[i]);
		mylog << endl;
	}
	mylog.close();
}
void LogFileWriter::WriteFileInfo(std::wostream & input_file,  TaskWorkerResults & res)
{
	input_file << "Check sum: " << res.checkSum << L" | ";
	input_file << "Size: " << res.fileSize << L" | ";
	SYSTEMTIME & stLocal = res.stLocal;
	auto old_char_fill = input_file.fill(L'0');
	auto old_field_width = input_file.width(2);
	input_file << L"Created on: " << stLocal.wDay << L"/" << stLocal.wMonth << L"/" <<
		stLocal.wYear <<  L" : "<< L" " << stLocal.wHour << L":" << stLocal.wMinute;
	input_file.fill(old_char_fill);
	input_file.width(old_field_width);
}
void LogFileWriter::FileInfoTaskWorker(TaskWorkerData & data, unsigned int taskIndex)
{
		
	try
	{
		FileProperties fileProperties = FileProperties(data.filesName[taskIndex]);
		fileProperties.GetFileSize(data.results[taskIndex].fileSize); 		// copy file size
		fileProperties.GetFileCreatingTime(data.results[taskIndex].stLocal); // copy file creation time
		fileProperties.GetFileCheckSum(data.results[taskIndex].checkSum); // copy file check sum
	} 
	catch(FilePropertiesException & e)
	{
	} 
	catch(std::exception & e)
	{
		data.semArray[taskIndex]->unlock();
		throw;
	}
	data.semArray[taskIndex]->unlock();
}
void LogFileWriter::CreateAndWrite(const std::wstring & logFileName)
{
	SortFilesNameArray();
	WriteDataInLog(logFileName);
}
LogFileWriter::~LogFileWriter(void)
{
}
